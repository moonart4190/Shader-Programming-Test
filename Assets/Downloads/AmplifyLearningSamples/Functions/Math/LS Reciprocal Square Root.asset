%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 78b2425a2284af743826c689403a4924, type: 3}
  m_Name: LS Reciprocal Square Root
  m_EditorClassIdentifier: 
  m_functionInfo: "// Made with Amplify Shader Editor v1.9.8\n// Available at the
    Unity Asset Store - http://u3d.as/y3X \n/*ASEBEGIN\nVersion=19800\nNode;AmplifyShaderEditor.CommentaryNode;33;-640,-320;Inherit;False;515.0176;223.8461;Math;3;3;22;18;;0,0,0,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;31;-640,-64;Inherit;False;859.2;344.6;Example
    Manual Normalization;4;27;30;29;28;;0,0,0,1;0;0\nNode;AmplifyShaderEditor.CommentaryNode;25;-640,-640;Inherit;False;649.7999;305.1;Reciprocal
    Square Root Node;3;24;26;19;;0,0,0,1;0;0\nNode;AmplifyShaderEditor.StickyNoteNode;19;-432,-592;Inherit;False;384.0999;100;;;0,0,0,1;The
    Reciprocal Square Root Node divides one by the square root of the input value.;0;0\nNode;AmplifyShaderEditor.StickyNoteNode;26;-432,-480;Inherit;False;395.7999;116.9;;;0,0,0,1;The
    Rsqrt Node provides the reciprocal square root of a scalar or of the individual
    components of vectors defined by its Input value. This can also be viewed as
    the inverse square root, 1/Sqrt( Input );0;0\nNode;AmplifyShaderEditor.RSqrtOpNode;24;-560,-576;Inherit;False;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.DotProductOpNode;28;-336,48;Inherit;False;2;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.RSqrtOpNode;29;-208,48;Inherit;True;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.SimpleMultiplyOpNode;30;-16,-16;Inherit;True;2;2;0;FLOAT3;0,0,0;False;1;FLOAT;0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.PosVertexDataNode;27;-592,-16;Inherit;True;0;0;5;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.StickyNoteNode;32;-1149.6,-640;Inherit;False;455.5001;191;Reference
    Implementation;;0,0,0,1;rsqrt is best implemented as a native reciprocal square
    root instruction, however rsqrt may be implemented via a pow function:$$float3
    rsqrt(float3 a)${$  return pow(a, -0.5)@$}$Pr;0;0\nNode;AmplifyShaderEditor.SimpleDivideOpNode;18;-288,-256;Inherit;False;2;0;FLOAT;1;False;1;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.SqrtOpNode;22;-432,-256;Inherit;False;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionInput;3;-592,-256;Inherit;False;In;1;0;False;1;0;FLOAT;1;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionOutput;0;-640,-768;Inherit;False;True;-1;Out;0;True;1;0;FLOAT;0;False;1;FLOAT;0\nWireConnection;28;0;27;0\nWireConnection;28;1;27;0\nWireConnection;29;0;28;0\nWireConnection;30;0;27;0\nWireConnection;30;1;29;0\nWireConnection;18;1;22;0\nWireConnection;22;0;3;0\nASEEND*/\n//CHKSM=2907E784DF5718007EFA0F6238D1F332A37F1FED"
  m_functionName: 
  m_description: 'Reciprocal Square Root Node

    Rsqrt


    Learning Sample


    GPU
    Cycles:

    16-31'
  m_additionalIncludes:
    m_additionalIncludes: []
    m_outsideIncludes: []
  m_additionalPragmas:
    m_additionalPragmas: []
    m_outsidePragmas: []
  m_additionalDirectives:
    m_validData: 0
    m_isDirty: 0
    m_moduleName: ' Additional Directives'
    m_independentModule: 1
    m_customEdited: 0
    m_additionalDirectives: []
    m_shaderFunctionDirectives: []
    m_nativeDirectives: []
    m_nativeDirectivesIndex: -1
    m_nativeDirectivesFoldout: 0
    m_directivesSaveItems: []
  m_nodeCategory: 0
  m_headerStyle: 2
  m_headerColor: {r: 0.19215687, g: 0.25882354, b: 0.3254902, a: 1}
  m_customNodeCategory: LS Math
  m_previewPosition: 0
  m_hidden: 0
  m_url: 
