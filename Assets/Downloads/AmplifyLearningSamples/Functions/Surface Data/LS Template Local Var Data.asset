%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 78b2425a2284af743826c689403a4924, type: 3}
  m_Name: LS Template Local Var Data
  m_EditorClassIdentifier: 
  m_functionInfo: "// Made with Amplify Shader Editor v1.9.8\n// Available at the
    Unity Asset Store - http://u3d.as/y3X \n/*ASEBEGIN\nVersion=19800\nNode;AmplifyShaderEditor.CommentaryNode;134;128,-1536;Inherit;False;822.0601;1038.522;Template
    Local Var Data Node ;5;163;159;158;103;160;;0,0,0,1;0;0\nNode;AmplifyShaderEditor.StickyNoteNode;103;432,-1488;Inherit;False;466.524;177.6739;;;0.05660379,0.05046281,0.05046281,1;The
    Template Local Var Data node allows access to local variables registered through
    the /*ase_local_var*/ tag over the currently used Template shader via the Data
    dropdown option. $$The node's Outputs type and amount will vary according to
    which type of data is currently selected;0;0\nNode;AmplifyShaderEditor.StickyNoteNode;158;432,-1296;Inherit;False;460.524;194;NOTE;;0.05660379,0.05046281,0.05046281,1;This
    tag can register local variables both on vertex and fragment data and on all
    available passes, it's up to the user to know what that variable represents and
    to which output node it should be used.$$Node header color changes according
    to where the local variable was registered. Red represent vertex local variables
    and yellow represent fragment variables.;0;0\nNode;AmplifyShaderEditor.StickyNoteNode;159;432,-1088;Inherit;False;455;229;Node
    Parameter;;0,0,0,1;SubShader$Select which subshader to get local var data$$Pass$Select
    which Pass to get local var data.$$Data$Select which local var data to output.$;0;0\nNode;AmplifyShaderEditor.StickyNoteNode;163;176,-848;Inherit;False;708.3636;300.1863;;;0,0,0,1;v2f
    vert ( appdata v /*ase_vert_input*/)${$\tv2f o@$\tUNITY_SETUP_INSTANCE_ID(v)@$\tUNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o)@$\to.texcoord.xy
    = v.texcoord.xy@$$\t/*ase_local_var*/float3 MyLocalVar@$$\t/*ase_vert_code:v=appdata@o=v2f*/$\tv.vertex.xyz
    += /*ase_vert_out:Local Vertex@Float3*/ float3(0,0,0) /*end*/@$\to.vertex = UnityObjectToClipPos(v.vertex)@$\treturn
    o@$};0;0\nNode;AmplifyShaderEditor.TemplateLocalVarsNode;160;176,-1488;Inherit;False;0;0;;0;5;FLOAT;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4\nNode;AmplifyShaderEditor.FunctionOutput;118;128,-1664;Inherit;False;True;-1;Output;0;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nASEEND*/\n//CHKSM=3471835579EA3B0C35A80CBFF497056CB48AC537"
  m_functionName: 
  m_description: 'Template Local Var Data Node


    Learning Sample

'
  m_additionalIncludes:
    m_additionalIncludes: []
    m_outsideIncludes: []
  m_additionalPragmas:
    m_additionalPragmas: []
    m_outsidePragmas: []
  m_additionalDirectives:
    m_validData: 0
    m_isDirty: 0
    m_moduleName: ' Additional Directives'
    m_independentModule: 1
    m_customEdited: 0
    m_additionalDirectives: []
    m_shaderFunctionDirectives: []
    m_nativeDirectives: []
    m_nativeDirectivesIndex: -1
    m_nativeDirectivesFoldout: 0
    m_directivesSaveItems: []
  m_nodeCategory: 0
  m_headerStyle: 2
  m_headerColor: {r: 0.7529412, g: 0.6784314, b: 0, a: 1}
  m_customNodeCategory: LS Surface Data
  m_previewPosition: 0
  m_hidden: 0
  m_url: 
